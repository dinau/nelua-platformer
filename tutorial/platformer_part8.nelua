require"sdl2"
require"sdl2_image"
require"sdl2_ttf"
require"utils"
require"os"
require"arg"
require"string"
require"vector"
require"math"
require"io"

Debug = true  -- for dprint()

--- win32api
local function GetTickCount(): uint32 <cimport> end

---
local Input     = @enum{none = 0,left = 1, right = 2, jump = 3 , restart = 4, quit = 5}
local Collision = @enum{x = 0, y = 1, corner = 2}
local Time = @record{
    begin: integer, finish: integer, best: integer
}
local Player = @record{
    texture: *SDL_Texture,
    pos: Vec2d,
    vel: Vec2d,
    time: Time,
}
local Map = @record{
    texture: *SDL_Texture,
    width:cint, height: cint,
    tiles: vector(uint8)
}
local Game = @record{
    renderer: *SDL_Renderer,
    inputs : [6]boolean,
    font: *TTF_Font,
    player: Player,
    map: Map,
    camera: SDL_FPoint,
}

local TilesPerRow <comptime> = 16
local TileSize    = Vec2d{64, 64}
local PlayerSize  = Vec2d{64, 64}
local WindowSize  = Vec2d{1280, 720}

local air    <comptime> =   0
local start  <comptime> =  78
local finish <comptime> = 110

--- Camera moving attribute
local FluidCamera = true
local InnerCamera = false

--------------
--- renderTee
--------------
local renderTee = function(renderer: *SDL_Renderer, texture: *SDL_Texture, pos: Vec2d)
  local x = pos.x
  local y = pos.y
  local TBodyParts = @record{ rect:SDL_Rect, frect:SDL_FRect, flip:cint }
  local bodyParts: [8]TBodyParts = {
    {SDL_Rect{192,64,64,32},  SDL_FRect{x-60,y   ,96,48} ,SDL_FLIP_NONE},       -- back feet shadow
    {SDL_Rect{96 ,0 ,96,96},  SDL_FRect{x-48,y-48,96,96} ,SDL_FLIP_NONE},       -- body shadow
    {SDL_Rect{192,64 ,64,32}, SDL_FRect{x-36,y   ,96,48} ,SDL_FLIP_NONE},       -- front feet shadow
    {SDL_Rect{192,32 ,64,32}, SDL_FRect{x-60,y   ,96,48} ,SDL_FLIP_NONE},       -- back feet
    {SDL_Rect{0  ,0  ,96,96}, SDL_FRect{x-48,y-48,96,96} ,SDL_FLIP_NONE},       -- body
    {SDL_Rect{192,32 ,64,32}, SDL_FRect{x-36,y   ,96,48} ,SDL_FLIP_NONE},       -- front feet
    {SDL_Rect{64 ,96 ,32,32}, SDL_FRect{x-18,y-21,36,36} ,SDL_FLIP_NONE},       -- left eye
    {SDL_Rect{64 ,96 ,32,32}, SDL_FRect{x-6,y-21 ,36,36} ,SDL_FLIP_HORIZONTAL}, -- right eye
  }
  for _, v in ipairs(bodyParts) do
    SDL_RenderCopyExF(renderer, texture
                     ,v.rect ,v.frect
                     ,0.0
                     ,nilptr ,v.flip)
  end
end

--------------
--- renderMap
--------------
local renderMap = function(renderer: *SDL_Renderer, map:Map, camera:SDL_FPoint)
  local clip = SDL_Rect{0, 0 ,TileSize.x ,TileSize.y}
  local dest = SDL_Rect{0, 0 ,TileSize.x ,TileSize.y}
  for i, tileNr in ipairs(map.tiles) do
    if tileNr ~= 0 then
      clip.x = (tileNr % TilesPerRow ) * TileSize.x
      clip.y = math.floor(tileNr / TilesPerRow ) * TileSize.y
      dest.x = (i % map.width) * TileSize.x - (@cint)(camera.x)
      dest.y = math.floor(i / map.width) * TileSize.y - (@cint)(camera.y)

      SDL_RenderCopy(renderer, map.texture, &clip, &dest)
    end
  end
end

------------------
--- renderTextSub
------------------
local renderTextSub = function(renderer: *SDL_Renderer
                             , font: *TTF_Font
                             , text: string
                             , x:integer, y:integer
                             , outline: integer
                             , color: SDL_Color)
  TTF_SetFontOutline(font, outline)
  local surface = TTF_RenderUTF8_Blended(font, text, color)
  if sdlFailIf(nil ~= surface,"Could not render text surface") then os.exit(1) end
  SDL_SetSurfaceAlphaMod(surface, color.a)
  local source = SDL_Rect{0, 0, surface.w, surface.h}
  local dest   = SDL_Rect{x - outline, y - outline, surface.w, surface.h}
  local texture = SDL_CreateTextureFromSurface(renderer,surface)
  if sdlFailIf(nil ~= texture,"Could not create texture from rendered text") then os.exit(1) end
  SDL_FreeSurface(surface)
  SDL_RenderCopyEx(renderer, texture, source, dest, 0.0, nilptr, SDL_FLIP_NONE)
  SDL_DestroyTexture(texture)
end

---------------
--- renderText
---------------
function Game:renderText(text: string, x: integer, y: integer, color: SDL_Color)
  local outlineColor = SDL_Color{0, 0, 0, 0x8f}
  renderTextSub(self.renderer, self.font, text, x, y, 2, outlineColor)
  renderTextSub(self.renderer, self.font, text, x, y, 0, color)
end

-----------
-- toInput
-----------
local toInput = function (key:integer)
  local write = function(str:string)
    -- dwrite(str)
  end
  write("\n")
  if     key == SDL_SCANCODE_A or key == SDL_SCANCODE_H or key == SDL_SCANCODE_LEFT then write("LEFT: ") return Input.left
  elseif key == SDL_SCANCODE_D or key == SDL_SCANCODE_L or key == SDL_SCANCODE_RIGHT then write("RIGHT: ") return Input.right
  elseif key == SDL_SCANCODE_UP or key == SDL_SCANCODE_SPACE or key == SDL_SCANCODE_J or key == SDL_SCANCODE_K then write("JUMP: ") return Input.jump
  elseif key == SDL_SCANCODE_R then write("Rstart: ") return Input.restart
  elseif key == SDL_SCANCODE_Q or key == SDL_SCANCODE_ESCAPE then write("Quit: ") return Input.quit
  else write("None: ") return Input.none
  end
end

------------------
--- restartPlayer
------------------
local restartPos = Vec2d{170, 500}    -- Initial pos
local restartVel = Vec2d{0.0 , 0.0}   -- Initial vel
local restartFinish:integer = -1
local restartBest:integer   = -1

function Player:restartPlayer()
    self.pos =  restartPos
    self.vel =  restartVel
    self.time.begin = -1
    self.time.finish= restartFinish
end

--------------
--- newTime     -- Time type
--------------
local newTime = function(): Time
  return Time{
    begin   =  -1,
    finish  =  restartFinish,
    best    =  restartBest,
  }
end

--------------
--- newPlayer   -- Player type
--------------
local newPlayer = function(texture: *SDL_Texture): Player
  return Player{
    texture = texture,
    time = newTime(),
    pos = restartPos,
    vel = restartVel,
  }
end

------------
--- newMap     -- : Map type
------------
local newMap = function(texture: *SDL_Texture, file:string): Map
  local result = Map{tiles = {}, texture = texture, width = 0,height = 0} -- Map type
  for line in io.lines(file) do
    local width = 0
    for word in line:gmatchview('%w+')  do
      if word ~= "" then
        local value = tointeger(word)
        if value > 255 then
          print("Invalid value " .. word .. "in map " .. file)
        end
        result.tiles:push(value)
        width = width + 1
      end
    end
    if (result.width > 0) and (result.width ~= width) then
      print("Incompatible line length in map " .. file)
    end
    result.width = width
    result.height = result.height + 1
  end
  return result
end

------------
--- newGame   -- Game type
------------
local newGame = function(renderer: *SDL_Renderer): Game
  local fontName = "DejaVuSans.ttf"
  local f = TTF_OpenFont(fontName, 28)
  if sdlFailIf(f ~= nil,"Font Load: " .. fontName) then os.exit(1) end
  return  Game{
    renderer    = renderer,
    inputs      = {false,false,false, false,false,false},
    font        = f,
    --player      = newPlayer(IMG_LoadTexture(renderer, "player.png")),
    player      = newPlayer(IMG_LoadTexture(renderer, "tika.png")),
    map         = newMap(IMG_LoadTexture(renderer,"grass.png"), "default.map"),
    camera      = SDL_FPoint{0,0},
  }
end

--------------------
-- Game:handleInput
--------------------
function Game:handleInput()
  local event: SDL_Event
  while SDL_PollEvent(event) ~= 0 do
    local kind = event.type
    if kind == SDL_QUIT then
      self.inputs[Input.quit] = true
    elseif kind == SDL_KEYDOWN then
      self.inputs[toInput(event.key.keysym.scancode)] = true
    elseif kind == SDL_KEYUP then
      self.inputs[toInput(event.key.keysym.scancode)] = false
    end
  end
end

---------------
--- formatTime
---------------
local formatTime = function(ticks: integer): string
  local mins  = math.floor(math.floor(ticks / 50) / 60)
  local secs  = math.ceil(ticks / 50) % 60
  local cents = math.ceil(ticks % 50) * 2
  return string.format("%02d:%02d:%02d",mins,secs,cents)
end

----------------
--- Game:render
----------------
function Game:render(tick: integer)
   SDL_RenderClear(self.renderer)
   local p = Vec2d{self.player.pos.x - self.camera.x, self.player.pos.y - self.camera.y}
   renderTee(self.renderer, self.player.texture, p)
   renderMap(self.renderer, self.map, self.camera)

   local time = self.player.time
   local white = SDL_Color{0xff, 0xff, 0xff, 0xff}
   local green = SDL_Color{0x00, 0xc0, 0x00, 0xff}
   local blue = SDL_Color{0x00, 0xff, 0xff, 0xff}
   if time.begin >= 0 then
     self:renderText(formatTime(tick - time.begin), 50, 100, white)
   elseif time.finish >= 0 then
     self:renderText("Finished in: " .. formatTime(time.finish), 50, 100, white)
   end
   if time.best >= 0 then
     self:renderText("Best time  : " .. formatTime(time.best), 50, 150, green)
   end
   if time.begin < 0 then
     local ver: SDL_version
     SDL_GetVersion(&ver)
     local base = 230
     local colm = 30
     self:renderText("Jump   : Spase, Up, J, K",50, base+colm*1, white)
     self:renderText("Left     : A, H, Left",50,    base+colm*2, white)
     self:renderText("Right   : D, L, Right",50,    base+colm*3, white)
     self:renderText("Restart: R",50,               base+colm*4, white)
     self:renderText("Quit     : Q, Esc",50,        base+colm*5, white)
     self:renderText(_VERSION,50,                   base+colm*7, white)
     self:renderText("SDL2           " .. ver.major .. "." .. ver.minor .. "." .. ver.patch, 50,    base+colm*8, white)
     local pver = IMG_Linked_Version()
     self:renderText("SDL_image  "     .. pver.major .. "." .. pver.minor .. "." .. pver.patch, 50, base+colm*9, white)
     pver = TTF_Linked_Version()
     self:renderText("SDL_ttf        " .. pver.major .. "." .. pver.minor .. "." .. pver.patch, 50, base+colm*10, white)
     self:renderText("Nelua-Platformer",50,                                                         base+colm*14, blue)
   end
   SDL_RenderPresent(self.renderer)
end

------------
--- getTile
------------
local getTile = function (map: Map, x:integer, y: integer): uint8
  local nx = clamp(math.floor(x / TileSize.x), 0, map.width - 1)
  local ny = clamp(math.floor(y / TileSize.y), 0, map.height - 1)
  local pos = math.ceil(ny * map.width + nx)
  return map.tiles[pos]
end

---------------
--- getTileVec
---------------
local getTileVec = function(map: Map, pos: Vec2d): uint8
  return getTile(map, math.floor(pos.x), math.floor(pos.y))
end

---------------
--- isSolid
---------------
local isSolid = function (map: Map, pos:Vec2d): boolean
  local val = getTile(map, math.ceil(pos.x), math.ceil(pos.y))
  return (val ~= air) and (val ~= start) and (val ~= finish)
end

-------------
--- onGround
-------------
local onGround = function (map: Map, pos: Vec2d, size:Vec2d): boolean
  local sz =  Vec2d{size.x * 0.5, size.y * 0.5}
  local pt1 = Vec2d{pos.x - sz.x, pos.y + sz.y + 1}
  local pt2 = Vec2d{pos.x + sz.x, pos.y + sz.y + 1}
  return isSolid(map, pt1) or isSolid(map, pt2)
end

------------
--- testBox
------------
local testBox = function(map: Map, pos: Vec2d, size: Vec2d): boolean
  local sz = Vec2d{size.x * 0.5, size.y * 0.5}
  return isSolid(map, Vec2d{pos.x - sz.x, pos.y - sz.y}) or
         isSolid(map, Vec2d{pos.x + sz.x, pos.y - sz.y}) or
         isSolid(map, Vec2d{pos.x - sz.x, pos.y + sz.y}) or
         isSolid(map, Vec2d{pos.x + sz.x, pos.y + sz.y})
end

----------------
--- vector2dLen
----------------
local vector2dLen = function(vec:Vec2d): float32
  return math.sqrt((vec.x * vec.x) + (vec.y * vec.y))
end

-----------------
--- Game:moveBox
-----------------
function Game:moveBox(size: Vec2d): vector(Collision)
  local  distance = vector2dLen(self.player.vel)
  local  maximum = math.floor(distance)
  if distance < 0 then do return end end

  local fraction = 1.0 / (maximum + 1)
  local result: vector(Collision)
  for i = 0, maximum do
    local newPos = Vec2d{0.0, 0.0}
    newPos.x = self.player.pos.x + (self.player.vel.x * fraction)
    newPos.y = self.player.pos.y + (self.player.vel.y * fraction)

    if testBox(self.map, newPos, size) then
      local hit = false
      local pt:Vec2d = {self.player.pos.x, newPos.y}
      if testBox(self.map, pt, size) then
        result:push(Collision.y)
        newPos.y = self.player.pos.y
        self.player.vel.y = 0
        hit = true
      end

      pt = {newPos.x, self.player.pos.y}
      if testBox(self.map, pt, size) then
        result:push(Collision.x)
        newPos.x = self.player.pos.x
        self.player.vel.x = 0
        hit = true
      end

      if not hit then
        result:push(Collision.corner)
        -- newPos = self.player.pos
        self.player.pos = newPos
        self.player.vel = {0.0, 0.0}
      end

    end
    self.player.pos = newPos
  end -- for end
  return result
end

-----------------
--- Game:physics
-----------------
function Game:physics()
  if self.inputs[Input.restart] then
    self.player:restartPlayer()
  end

  local ground = onGround(self.map, self.player.pos, PlayerSize)

  if self.inputs[Input.jump] then
    if ground then
      self.player.vel.y = -21
    end
  end
  local direction = boolToInt(self.inputs[Input.right]) -
                    boolToInt(self.inputs[Input.left])
  -- direction is [0 or 1 or -1]

  self.player.vel.y = self.player.vel.y + 0.75
  if ground then
    self.player.vel.x = 0.5 * self.player.vel.x + 4.0 * direction
  else
    self.player.vel.x = 0.95 * self.player.vel.x + 2.0 * direction
  end
  self.player.vel.x = clamp(self.player.vel.x, -8, 8)

  self:moveBox(PlayerSize)
end

-----------------
--- Game:destroy
-----------------
function Game:destroy()
  self.map.tiles:destroy()
end

--------------------
--- Game:moveCamera
--------------------
function Game:moveCamera()
  local halfWin = WindowSize.x / 2
  if FluidCamera then
    local dist = self.camera.x - self.player.pos.x + halfWin
    self.camera.x = self.camera.x - 0.05 * dist
  elseif InnerCamera then
    local leftArea  = self.player.pos.x - halfWin - 100
    local rightArea = self.player.pos.x - halfWin + 100
    self.camera.x = clamp(self.camera.x, leftArea, rightArea)
  else
    self.camera.x = self.player.pos.x - halfWin
  end
end

----------
--- logic
----------
function Game:logic(tick: integer)
  switch getTileVec(self.map, self.player.pos) do
  case start then
    self.player.time.begin = tick
  case finish then
    if self.player.time.begin >= 0 then
      self.player.time.finish = tick - self.player.time.begin
      self.player.time.begin = -1
      if self.player.time.best < 0 or self.player.time.finish < self.player.time.best then
         self.player.time.best = self.player.time.finish
      end
    end
  end
end
------------------
--- Main function
------------------
local main = function()
  if sdlFailIf(0 == SDL_Init(SDL_INIT_VIDEO + SDL_INIT_TIMER + SDL_INIT_EVENTS),
    "SDL2 initialization failed") then os.exit(1) end
  if sdlFailIf(SDL_TRUE == SDL_SetHint("SDL_RENDER_SCALE_QUALITY", "2"),
     "Linear texture filtering could not be enabled") then os.exit(1) end

  if sdlFailIf(0 ~= IMG_Init(IMG_INIT_PNG), "SDL2 Image initialization failed") then os.exit(1) end
  if sdlFailIf(0 == TTF_Init(), "SDL2_tff font driver initialization failed") then os.exit(1) end

  local window = SDL_CreateWindow(string.format("%s:  [ %s ]","Our own 2D platformer written in NeLua",getExeName(arg[0])),
      SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED,
      WindowSize.x, WindowSize.y, SDL_WINDOW_SHOWN)
  if sdlFailIf(0 ~= window,"Window could not be created") then os.exit(1) end

  local renderer = SDL_CreateRenderer(window,-1,
    SDL_RENDERER_ACCELERATED or SDL_RENDERER_PRESENTVSYNC)
  if sdlFailIf(0 ~= renderer,"Renderer could not be created") then os.exit(1) end

  SDL_SetRenderDrawColor(renderer,110,132,174,255)

  local game = newGame(renderer)
  defer game:destroy() end

  local startTime = GetTickCount()
  local lastTick = 0

  --------------
  --- Main loop
  --------------
  -- Game loop, draws each frame
  while not game.inputs[Input.quit] do
    game:handleInput()
    local diff    = math.floor((GetTickCount() - startTime)*50) / 1000
    local newTick = math.ceil(diff)
    for tick = lastTick + 1, newTick do
      game:physics()
      game:moveCamera()
      game:logic(tick)
    end
    lastTick = newTick

    game:render(lastTick)
  end
  --------------
  --- End procs
  --------------
  SDL_DestroyRenderer(renderer)
  SDL_DestroyWindow(window)
  TTF_Quit()
  IMG_Quit()
  SDL_Quit()
end

---------
--- main
---------
main()
