##[[
linklib 'SDL2'
linklib 'SDL2_image'
]]

global SDL_Keysym <cimport> = @record{
  scancode: cint,
  sym: int32,
  mod: uint16,
  unused: uint32
}
global SDL_KeyboardEvent <cimport> = @record{
  type: uint32,
  timestamp: uint32,
  windowID: uint32,
  state: uint8,
  repeated: uint8,
  padding: uint16,
  keysym: SDL_Keysym
}
global SDL_Event <cimport> = @union{
  type: uint32,
  key:  SDL_KeyboardEvent,
  padding: [56]byte
}
global SDL_Rect <cimport> = @record{
  x: cint, y: cint,
  w: cint, h: cint,
}
global SDL_Point <cimport> = @record{
  x: cint, y: cint,
}
global SDL_FPoint <cimport> = @record{
  x: float32, y: float32,
}
global SDL_FRect <cimport> = @record{
  x: float32, y: float32,
  w: float32, h: float32,
}
global SDL_Window   <cimport> = @record{}
global SDL_Renderer <cimport> = @record{}
global SDL_Surface  <cimport> = @record{}
global SDL_RWops    <cimport> = @record{}

global Point2d <cimport> = @record{
  x: cint, y: cint,
}
global Vector2d <cimport> = @record{
  x: float32, y: float32,
}
global SDL_RendererFlip <cimport> = @enum{
    SDL_FLIP_NONE = 0x00000000,
    SDL_FLIP_HORIZONTAL = 0x00000001,
    SDL_FLIP_VERTICAL = 0x00000002
}

-- import SDL constants
global SDL_INIT_VIDEO            <comptime> = 0x20
global SDL_INIT_TIMER            <comptime> = 0x01
global SDL_INIT_EVENTS           <comptime> = 0x4000
global SDL_WINDOWPOS_CENTERED    <comptime> = 0x2FFF0000
global SDL_WINDOW_SHOWN          <comptime> = 0x00000004
global SDL_RENDERER_ACCELERATED  <comptime> = 0x00000002
global SDL_RENDERER_PRESENTVSYNC <comptime> = 0x00000004
global SDL_QUIT                  <comptime> = 0x100
global SDL_FLIP_NONE             <comptime> = 0x00000000
global SDL_FLIP_HORIZONTAL       <comptime> = 0x00000001

-- Key scan / code
global SDL_SCANCODE_A     <comptime> = 4
global SDL_SCANCODE_D     <comptime> = 7
global SDL_SCANCODE_H     <comptime> = 11
global SDL_SCANCODE_J     <comptime> = 13
global SDL_SCANCODE_K     <comptime> = 14
global SDL_SCANCODE_L     <comptime> = 15
global SDL_SCANCODE_Q     <comptime> = 20
global SDL_SCANCODE_R     <comptime> = 21
global SDL_SCANCODE_SPACE <comptime> = 44
global SDL_SCANCODE_RIGHT <comptime> = 79
global SDL_SCANCODE_LEFT  <comptime> = 80
global SDL_SCANCODE_DOWN  <comptime> = 81
global SDL_SCANCODE_UP    <comptime> = 82
global SDL_KEYDOWN        <comptime> = 0x300
global SDL_KEYUP          <comptime> = 0x301
--
global SDL_TRUE = true
global SDL_bool = boolean
global SDL_Texture = uint32

-- import SDL functions
global function SDL_SetHint(name:cstring, value:cstring): SDL_bool <cimport> end
global function SDL_Init(flags: uint32): int32 <cimport> end
global function SDL_CreateWindow(title: cstring, x: cint, y: cint, w: cint, h: cint, flags: uint32): *SDL_Window <cimport> end
global function SDL_Quit() <cimport> end
global function SDL_DestroyWindow(window: *SDL_Window) <cimport> end
global function SDL_PollEvent(event: *SDL_Event): int32 <cimport> end
global function SDL_CreateRenderer(window: *SDL_Window, index: cint, flags: uint32): *SDL_Renderer <cimport> end
global function SDL_DestroyRenderer(renderer: *SDL_Renderer) <cimport> end
global function SDL_RenderPresent(renderer: *SDL_Renderer) <cimport> end
global function SDL_RenderClear(renderer: *SDL_Renderer): cint <cimport> end
global function SDL_SetRenderDrawColor(renderer: *SDL_Renderer, r: uint8, g: uint8, b: uint8, a: uint8): cint <cimport> end
global function SDL_RenderFillRect(renderer: *SDL_Renderer, rect: *SDL_Rect): cint <cimport> end
global function SDL_CreateTextureFromSurface(renderer: *SDL_Renderer, surface: *SDL_Surface): *SDL_Texture <cimport> end
global function SDL_GetTicks(): uint32 <cimport> end
global function SDL_RenderCopyExF(renderer: *SDL_Renderer,
                                 texture:  *SDL_Texture,
                                 srcrect:  *SDL_Rect,
                                 dstrect:  *SDL_FRect,
                                 angle:    float64,
                                 center:   *SDL_FPoint,
                                 flip:SDL_RendererFlip): cint <cimport> end
global function SDL_RWFromFile(file: cstring, mode: cstring): *SDL_RWops <cimport> end
global function SDL_LoadBMP_RW(src: *SDL_RWops, freesrc:cint): *SDL_Surface <cimport> end

--- functions
global SDL_LoadBMP = function(file:string): *SDL_Surface
  return SDL_LoadBMP_RW(SDL_RWFromFile(file, "rb"), 1)
end
global LoadTexture = function(renderer: *SDL_Renderer, fname:string): *SDL_Texture
  return  SDL_CreateTextureFromSurface(renderer,SDL_LoadBMP(fname))
end

--- SDL2_image
global IMG_INIT_JPG <comptime>   = 0x00000001
global IMG_INIT_PNG <comptime>   = 0x00000002
global IMG_INIT_TIF <comptime>   = 0x00000004

global function IMG_Init(flags: cint): cint <cimport> end
global function IMG_LoadTexture(renderer: *SDL_Renderer, file:cstring): *SDL_Texture <cimport> end
